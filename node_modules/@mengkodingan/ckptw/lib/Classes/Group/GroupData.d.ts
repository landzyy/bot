import { BinaryNode, GroupMetadata, GroupParticipant, ParticipantAction } from "@whiskeysockets/baileys";
import { ICtx } from "../../Common/Types";
export declare class GroupData {
    ctx: ICtx;
    jid: string;
    constructor(ctx: ICtx, jid: string);
    members(): Promise<GroupParticipant[]>;
    inviteCode(): Promise<string | undefined>;
    revokeInviteCode(): Promise<string | undefined>;
    joinApproval(mode: "on" | "off"): Promise<void>;
    leave(): Promise<void>;
    membersCanAddMemberMode(mode: "on" | "off"): Promise<void>;
    metadata(): Promise<GroupMetadata>;
    toggleEphemeral(expiration: number): Promise<void>;
    updateDescription(description?: string): Promise<void>;
    updateSubject(subject: string): Promise<void>;
    membersUpdate(members: string[], action: ParticipantAction): Promise<{
        status: string;
        jid: string;
        content: BinaryNode;
    }[]>;
    kick(members: string[]): Promise<{
        status: string;
        jid: string;
        content: BinaryNode;
    }[]>;
    add(members: string[]): Promise<{
        status: string;
        jid: string;
        content: BinaryNode;
    }[]>;
    promote(members: string[]): Promise<{
        status: string;
        jid: string;
        content: BinaryNode;
    }[]>;
    demote(members: string[]): Promise<{
        status: string;
        jid: string;
        content: BinaryNode;
    }[]>;
    pendingMembers(): Promise<{
        [key: string]: string;
    }[]>;
    pendingMembersUpdate(members: string[], action: 'reject' | 'approve'): Promise<{
        status: string;
        jid: string;
    }[]>;
    approvePendingMembers(members: string[]): Promise<{
        status: string;
        jid: string;
    }[]>;
    rejectPendingMembers(members: string[]): Promise<{
        status: string;
        jid: string;
    }[]>;
    updateSetting(setting: 'announcement' | 'not_announcement' | 'locked' | 'unlocked'): Promise<void>;
    open(): Promise<void>;
    close(): Promise<void>;
    lock(): Promise<void>;
    unlock(): Promise<void>;
}
//# sourceMappingURL=GroupData.d.ts.map